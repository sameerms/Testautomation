/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the Source EULA. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
'use strict';
/**
 * Defines how the host (editor) should sync
 * document changes to the language server.
 */
(function (TextDocumentSyncKind) {
    /**
     * Documents should not be synced at all.
     */
    TextDocumentSyncKind[TextDocumentSyncKind["None"] = 0] = "None";
    /**
     * Documents are synced by always sending the full content
     * of the document.
     */
    TextDocumentSyncKind[TextDocumentSyncKind["Full"] = 1] = "Full";
    /**
     * Documents are synced by sending the full content on open.
     * After that only incremental updates to the document are
     * send.
     */
    TextDocumentSyncKind[TextDocumentSyncKind["Incremental"] = 2] = "Incremental";
})(exports.TextDocumentSyncKind || (exports.TextDocumentSyncKind = {}));
var TextDocumentSyncKind = exports.TextDocumentSyncKind;
/**
 * The initialize method is sent from the client to the server.
 * It is send once as the first method after starting up the
 * worker. The requests parameter is of type [InitializeParams](#InitializeParams)
 * the response if of type [InitializeResult](#InitializeResult) of a Thenable that
 * resolves to such.
 */
var InitializeRequest;
(function (InitializeRequest) {
    InitializeRequest.type = { get method() { return 'initialize'; } };
})(InitializeRequest = exports.InitializeRequest || (exports.InitializeRequest = {}));
//---- Shutdown Method ----
/**
 * A shutdown request is sent from the client to the server.
 * It is send once when the client descides to shutdown the
 * server. The only notification that is sent after a shudown request
 * is the exit event.
 */
var ShutdownRequest;
(function (ShutdownRequest) {
    ShutdownRequest.type = { get method() { return 'shutdown'; } };
})(ShutdownRequest = exports.ShutdownRequest || (exports.ShutdownRequest = {}));
//---- Exit Notification ----
/**
 * The exit event is sent from the client to the server to
 * ask the server to exit its process.
 */
var ExitNotification;
(function (ExitNotification) {
    ExitNotification.type = { get method() { return 'exit'; } };
})(ExitNotification = exports.ExitNotification || (exports.ExitNotification = {}));
//---- Configuration notification ----
/**
 * The configuration change notification is sent from the client to the server
 * when the client's configuration has changed. The notification contains
 * the changed configuration as defined by the language client.
 */
var DidChangeConfigurationNotification;
(function (DidChangeConfigurationNotification) {
    DidChangeConfigurationNotification.type = { get method() { return 'workspace/didChangeConfiguration'; } };
})(DidChangeConfigurationNotification = exports.DidChangeConfigurationNotification || (exports.DidChangeConfigurationNotification = {}));
//---- Message show and log notifications ----
/**
 * The message type
 */
(function (MessageType) {
    /**
     * An error message.
     */
    MessageType[MessageType["Error"] = 1] = "Error";
    /**
     * A warning message.
     */
    MessageType[MessageType["Warning"] = 2] = "Warning";
    /**
     * An information message.
     */
    MessageType[MessageType["Info"] = 3] = "Info";
    /**
     * A log message.
     */
    MessageType[MessageType["Log"] = 4] = "Log";
})(exports.MessageType || (exports.MessageType = {}));
var MessageType = exports.MessageType;
/**
 * The show message notification is sent from a server to a client to ask
 * the client to display a particular message in the user interface.
 */
var ShowMessageNotification;
(function (ShowMessageNotification) {
    ShowMessageNotification.type = { get method() { return 'window/showMessage'; } };
})(ShowMessageNotification = exports.ShowMessageNotification || (exports.ShowMessageNotification = {}));
/**
 * The show message request is send from the server to the clinet to show a message
 * and a set of options actions to the user.
 */
var ShowMessageRequest;
(function (ShowMessageRequest) {
    ShowMessageRequest.type = { get method() { return 'window/showMessageRequest'; } };
})(ShowMessageRequest = exports.ShowMessageRequest || (exports.ShowMessageRequest = {}));
/**
 * The log message notification is send from the server to the client to ask
 * the client to log a particular message.
 */
var LogMessageNotification;
(function (LogMessageNotification) {
    LogMessageNotification.type = { get method() { return 'window/logMessage'; } };
})(LogMessageNotification = exports.LogMessageNotification || (exports.LogMessageNotification = {}));
//---- Telemetry notification
/**
 * The telemetry event notification is send from the server to the client to ask
 * the client to log telemetry data.
 */
var TelemetryEventNotification;
(function (TelemetryEventNotification) {
    TelemetryEventNotification.type = { get method() { return 'telemetry/event'; } };
})(TelemetryEventNotification = exports.TelemetryEventNotification || (exports.TelemetryEventNotification = {}));
/**
 * The document open notification is sent from the client to the server to signal
 * newly opened text documents. The document's truth is now managed by the client
 * and the server must not try to read the document's truth using the document's
 * uri.
 */
var DidOpenTextDocumentNotification;
(function (DidOpenTextDocumentNotification) {
    DidOpenTextDocumentNotification.type = { get method() { return 'textDocument/didOpen'; } };
})(DidOpenTextDocumentNotification = exports.DidOpenTextDocumentNotification || (exports.DidOpenTextDocumentNotification = {}));
/**
 * The document change notification is sent from the client to the server to signal
 * changes to a text document.
 */
var DidChangeTextDocumentNotification;
(function (DidChangeTextDocumentNotification) {
    DidChangeTextDocumentNotification.type = { get method() { return 'textDocument/didChange'; } };
})(DidChangeTextDocumentNotification = exports.DidChangeTextDocumentNotification || (exports.DidChangeTextDocumentNotification = {}));
/**
 * The document close notification is sent from the client to the server when
 * the document got closed in the client. The document's truth now exists
 * where the document's uri points to (e.g. if the document's uri is a file uri
 * the truth now exists on disk).
 */
var DidCloseTextDocumentNotification;
(function (DidCloseTextDocumentNotification) {
    DidCloseTextDocumentNotification.type = { get method() { return 'textDocument/didClose'; } };
})(DidCloseTextDocumentNotification = exports.DidCloseTextDocumentNotification || (exports.DidCloseTextDocumentNotification = {}));
/**
 * The document save notification is sent from the client to the server when
 * the document got saved in the client.
 */
var DidSaveTextDocumentNotification;
(function (DidSaveTextDocumentNotification) {
    DidSaveTextDocumentNotification.type = { get method() { return 'textDocument/didSave'; } };
})(DidSaveTextDocumentNotification = exports.DidSaveTextDocumentNotification || (exports.DidSaveTextDocumentNotification = {}));
//---- File eventing ----
/**
 * The watched files notification is sent from the client to the server when
 * the client detects changes to file watched by the lanaguage client.
 */
var DidChangeWatchedFilesNotification;
(function (DidChangeWatchedFilesNotification) {
    DidChangeWatchedFilesNotification.type = { get method() { return 'workspace/didChangeWatchedFiles'; } };
})(DidChangeWatchedFilesNotification = exports.DidChangeWatchedFilesNotification || (exports.DidChangeWatchedFilesNotification = {}));
/**
 * The file event type
 */
(function (FileChangeType) {
    /**
     * The file got created.
     */
    FileChangeType[FileChangeType["Created"] = 1] = "Created";
    /**
     * The file got changed.
     */
    FileChangeType[FileChangeType["Changed"] = 2] = "Changed";
    /**
     * The file got deleted.
     */
    FileChangeType[FileChangeType["Deleted"] = 3] = "Deleted";
})(exports.FileChangeType || (exports.FileChangeType = {}));
var FileChangeType = exports.FileChangeType;
//---- Diagnostic notification ----
/**
 * Diagnostics notification are sent from the server to the client to signal
 * results of validation runs.
 */
var PublishDiagnosticsNotification;
(function (PublishDiagnosticsNotification) {
    PublishDiagnosticsNotification.type = { get method() { return 'textDocument/publishDiagnostics'; } };
})(PublishDiagnosticsNotification = exports.PublishDiagnosticsNotification || (exports.PublishDiagnosticsNotification = {}));
//---- Completion Support --------------------------
/**
 * Request to request completion at a given text document position. The request's
 * parameter is of type [TextDocumentPosition](#TextDocumentPosition) the response
 * is of type [CompletionItem[]](#CompletionItem) or [CompletionList](#CompletionList)
 * or a Thenable that resolves to such.
 */
var CompletionRequest;
(function (CompletionRequest) {
    CompletionRequest.type = { get method() { return 'textDocument/completion'; } };
})(CompletionRequest = exports.CompletionRequest || (exports.CompletionRequest = {}));
/**
 * Request to resolve additional information for a given completion item.The request's
 * parameter is of type [CompletionItem](#CompletionItem) the response
 * is of type [CompletionItem](#CompletionItem) or a Thenable that resolves to such.
 */
var CompletionResolveRequest;
(function (CompletionResolveRequest) {
    CompletionResolveRequest.type = { get method() { return 'completionItem/resolve'; } };
})(CompletionResolveRequest = exports.CompletionResolveRequest || (exports.CompletionResolveRequest = {}));
/**
 * Request to request hover information at a given text document position. The request's
 * parameter is of type [TextDocumentPosition](#TextDocumentPosition) the response is of
 * type [Hover](#Hover) or a Thenable that resolves to such.
 */
var HoverRequest;
(function (HoverRequest) {
    HoverRequest.type = { get method() { return 'textDocument/hover'; } };
})(HoverRequest = exports.HoverRequest || (exports.HoverRequest = {}));
//---- SignatureHelp ----------------------------------
var SignatureHelpRequest;
(function (SignatureHelpRequest) {
    SignatureHelpRequest.type = { get method() { return 'textDocument/signatureHelp'; } };
})(SignatureHelpRequest = exports.SignatureHelpRequest || (exports.SignatureHelpRequest = {}));
//---- Goto Definition -------------------------------------
/**
 * A request to resolve the defintion location of a symbol at a given text
 * document position. The request's parameter is of type [TextDocumentPosition]
 * (#TextDocumentPosition) the response is of type [Definition](#Definition) or a
 * Thenable that resolves to such.
 */
var DefinitionRequest;
(function (DefinitionRequest) {
    DefinitionRequest.type = { get method() { return 'textDocument/definition'; } };
})(DefinitionRequest = exports.DefinitionRequest || (exports.DefinitionRequest = {}));
/**
 * A request to resolve project-wide references for the symbol denoted
 * by the given text document position. The request's parameter is of
 * type [ReferenceParams](#ReferenceParams) the response is of type
 * [Location[]](#Location) or a Thenable that resolves to such.
 */
var ReferencesRequest;
(function (ReferencesRequest) {
    ReferencesRequest.type = { get method() { return 'textDocument/references'; } };
})(ReferencesRequest = exports.ReferencesRequest || (exports.ReferencesRequest = {}));
//---- Document Highlight ----------------------------------
/**
 * Request to resolve a [DocumentHighlight](#DocumentHighlight) for a given
 * text document position. The request's parameter is of type [TextDocumentPosition]
 * (#TextDocumentPosition) the request reponse is of type [DocumentHighlight[]]
 * (#DocumentHighlight) or a Thenable that resolves to such.
 */
var DocumentHighlightRequest;
(function (DocumentHighlightRequest) {
    DocumentHighlightRequest.type = { get method() { return 'textDocument/documentHighlight'; } };
})(DocumentHighlightRequest = exports.DocumentHighlightRequest || (exports.DocumentHighlightRequest = {}));
/**
 * A request to list all symbols found in a given text document. The request's
 * parameter is of type [TextDocumentIdentifier](#TextDocumentIdentifier) the
 * response is of type [SymbolInformation[]](#SymbolInformation) or a Thenable
 * that resolves to such.
 */
var DocumentSymbolRequest;
(function (DocumentSymbolRequest) {
    DocumentSymbolRequest.type = { get method() { return 'textDocument/documentSymbol'; } };
})(DocumentSymbolRequest = exports.DocumentSymbolRequest || (exports.DocumentSymbolRequest = {}));
/**
 * A request to list project-wide symbols matching the query string given
 * by the [WorkspaceSymbolParams](#WorkspaceSymbolParams). The response is
 * of type [SymbolInformation[]](#SymbolInformation) or a Thenable that
 * resolves to such.
 */
var WorkspaceSymbolRequest;
(function (WorkspaceSymbolRequest) {
    WorkspaceSymbolRequest.type = { get method() { return 'workspace/symbol'; } };
})(WorkspaceSymbolRequest = exports.WorkspaceSymbolRequest || (exports.WorkspaceSymbolRequest = {}));
/**
 * A request to provide commands for the given text document and range.
 */
var CodeActionRequest;
(function (CodeActionRequest) {
    CodeActionRequest.type = { get method() { return 'textDocument/codeAction'; } };
})(CodeActionRequest = exports.CodeActionRequest || (exports.CodeActionRequest = {}));
/**
 * A request to provide code lens for the given text document.
 */
var CodeLensRequest;
(function (CodeLensRequest) {
    CodeLensRequest.type = { get method() { return 'textDocument/codeLens'; } };
})(CodeLensRequest = exports.CodeLensRequest || (exports.CodeLensRequest = {}));
/**
 * A request to resolve a command for a given code lens.
 */
var CodeLensResolveRequest;
(function (CodeLensResolveRequest) {
    CodeLensResolveRequest.type = { get method() { return 'codeLens/resolve'; } };
})(CodeLensResolveRequest = exports.CodeLensResolveRequest || (exports.CodeLensResolveRequest = {}));
/**
 * A request to to format a whole document.
 */
var DocumentFormattingRequest;
(function (DocumentFormattingRequest) {
    DocumentFormattingRequest.type = { get method() { return 'textDocument/formatting'; } };
})(DocumentFormattingRequest = exports.DocumentFormattingRequest || (exports.DocumentFormattingRequest = {}));
/**
 * A request to to format a range in a document.
 */
var DocumentRangeFormattingRequest;
(function (DocumentRangeFormattingRequest) {
    DocumentRangeFormattingRequest.type = { get method() { return 'textDocument/rangeFormatting'; } };
})(DocumentRangeFormattingRequest = exports.DocumentRangeFormattingRequest || (exports.DocumentRangeFormattingRequest = {}));
/**
 * A request to format a document on type.
 */
var DocumentOnTypeFormattingRequest;
(function (DocumentOnTypeFormattingRequest) {
    DocumentOnTypeFormattingRequest.type = { get method() { return 'textDocument/onTypeFormatting'; } };
})(DocumentOnTypeFormattingRequest = exports.DocumentOnTypeFormattingRequest || (exports.DocumentOnTypeFormattingRequest = {}));
/**
 * A request to rename a symbol.
 */
var RenameRequest;
(function (RenameRequest) {
    RenameRequest.type = { get method() { return 'textDocument/rename'; } };
})(RenameRequest = exports.RenameRequest || (exports.RenameRequest = {}));
/**
 * A request to provide document links
 */
var DocumentLinkRequest;
(function (DocumentLinkRequest) {
    DocumentLinkRequest.type = { get method() { return 'textDocument/documentLink'; } };
})(DocumentLinkRequest = exports.DocumentLinkRequest || (exports.DocumentLinkRequest = {}));
/**
 * Request to resolve additional information for a given document link. The request's
 * parameter is of type [DocumentLink](#DocumentLink) the response
 * is of type [DocumentLink](#DocumentLink) or a Thenable that resolves to such.
 */
var DocumentLinkResolveRequest;
(function (DocumentLinkResolveRequest) {
    DocumentLinkResolveRequest.type = { get method() { return 'documentLink/resolve'; } };
})(DocumentLinkResolveRequest = exports.DocumentLinkResolveRequest || (exports.DocumentLinkResolveRequest = {}));
//---- Refresh IntelliSense ----------------------------------------
/**
 * Notification sent when the an IntelliSense cache invalidation is requested
 */
var RebuildIntelliSenseNotification;
(function (RebuildIntelliSenseNotification) {
    RebuildIntelliSenseNotification.type = { get method() { return 'textDocument/rebuildIntelliSense'; } };
})(RebuildIntelliSenseNotification = exports.RebuildIntelliSenseNotification || (exports.RebuildIntelliSenseNotification = {}));
/**
 * Rebuild IntelliSense notification parameters
 */
var RebuildIntelliSenseParams = (function () {
    function RebuildIntelliSenseParams() {
    }
    return RebuildIntelliSenseParams;
}());
exports.RebuildIntelliSenseParams = RebuildIntelliSenseParams;
// Connection request message callback declaration
var ConnectionRequest;
(function (ConnectionRequest) {
    ConnectionRequest.type = { get method() { return 'connection/connect'; } };
})(ConnectionRequest = exports.ConnectionRequest || (exports.ConnectionRequest = {}));
// ------------------------------- < Connection Complete Event > ------------------------------------
var ConnectionCompleteNotification;
(function (ConnectionCompleteNotification) {
    ConnectionCompleteNotification.type = { get method() { return 'connection/complete'; } };
})(ConnectionCompleteNotification = exports.ConnectionCompleteNotification || (exports.ConnectionCompleteNotification = {}));
// ------------------------------- < Connection Changed Event > -------------------------------------
/**
 * Parameters for the ConnectionChanged notification.
 */
var ConnectionChangedParams = (function () {
    function ConnectionChangedParams() {
    }
    return ConnectionChangedParams;
}());
exports.ConnectionChangedParams = ConnectionChangedParams;
/**
 * Connection changed event callback declaration.
 */
var ConnectionChangedNotification;
(function (ConnectionChangedNotification) {
    ConnectionChangedNotification.type = { get method() { return 'connection/connectionchanged'; } };
})(ConnectionChangedNotification = exports.ConnectionChangedNotification || (exports.ConnectionChangedNotification = {}));
// ------------------------------- < Disconnect Request > -------------------------------------------
// Disconnect request message format
var DisconnectParams = (function () {
    function DisconnectParams() {
    }
    return DisconnectParams;
}());
exports.DisconnectParams = DisconnectParams;
// Disconnect request message callback declaration
var DisconnectRequest;
(function (DisconnectRequest) {
    DisconnectRequest.type = { get method() { return 'connection/disconnect'; } };
})(DisconnectRequest = exports.DisconnectRequest || (exports.DisconnectRequest = {}));
// ------------------------------- < Cancel Connect Request > ---------------------------------------
// Cancel connect request message format
var CancelConnectParams = (function () {
    function CancelConnectParams() {
    }
    return CancelConnectParams;
}());
exports.CancelConnectParams = CancelConnectParams;
// Cancel connect request message callback declaration
var CancelConnectRequest;
(function (CancelConnectRequest) {
    CancelConnectRequest.type = { get method() { return 'connection/cancelconnect'; } };
})(CancelConnectRequest = exports.CancelConnectRequest || (exports.CancelConnectRequest = {}));
// ------------------------------- < Change Database Request > -------------------------------------
var ChangeDatabaseParams = (function () {
    function ChangeDatabaseParams() {
    }
    return ChangeDatabaseParams;
}());
exports.ChangeDatabaseParams = ChangeDatabaseParams;
var ChangeDatabaseRequest;
(function (ChangeDatabaseRequest) {
    ChangeDatabaseRequest.type = { get method() { return 'connection/changedatabase'; } };
})(ChangeDatabaseRequest = exports.ChangeDatabaseRequest || (exports.ChangeDatabaseRequest = {}));
// ------------------------------- < List Databases Request > ---------------------------------------
// List databases request format
var ListDatabasesParams = (function () {
    function ListDatabasesParams() {
    }
    return ListDatabasesParams;
}());
exports.ListDatabasesParams = ListDatabasesParams;
// List databases response format
var ListDatabasesResult = (function () {
    function ListDatabasesResult() {
    }
    return ListDatabasesResult;
}());
exports.ListDatabasesResult = ListDatabasesResult;
// List databases request callback declaration
var ListDatabasesRequest;
(function (ListDatabasesRequest) {
    ListDatabasesRequest.type = { get method() { return 'connection/listdatabases'; } };
})(ListDatabasesRequest = exports.ListDatabasesRequest || (exports.ListDatabasesRequest = {}));
// ------------------------------- < Language Flavor Changed Notification > ---------------------------------------
var LanguageFlavorChangedNotification;
(function (LanguageFlavorChangedNotification) {
    LanguageFlavorChangedNotification.type = { get method() { return 'connection/languageflavorchanged'; } };
})(LanguageFlavorChangedNotification = exports.LanguageFlavorChangedNotification || (exports.LanguageFlavorChangedNotification = {}));
// ------------------------------- < Table Metadata Request > ---------------------------------------
// Table metadata request format
var TableMetadataParams = (function () {
    function TableMetadataParams() {
    }
    return TableMetadataParams;
}());
exports.TableMetadataParams = TableMetadataParams;
// Table metadata response format
var TableMetadataResult = (function () {
    function TableMetadataResult() {
    }
    return TableMetadataResult;
}());
exports.TableMetadataResult = TableMetadataResult;
// Table metadata request callback declaration
var TableMetadataRequest;
(function (TableMetadataRequest) {
    TableMetadataRequest.type = { get method() { return 'metadata/table'; } };
})(TableMetadataRequest = exports.TableMetadataRequest || (exports.TableMetadataRequest = {}));
// ------------------------------- < View Metadata Request > ---------------------------------------
// Table metadata request callback declaration
var ViewMetadataRequest;
(function (ViewMetadataRequest) {
    ViewMetadataRequest.type = { get method() { return 'metadata/view'; } };
})(ViewMetadataRequest = exports.ViewMetadataRequest || (exports.ViewMetadataRequest = {}));
/**
 * Event sent when the language service is finished updating after a connection
 */
var IntelliSenseReadyNotification;
(function (IntelliSenseReadyNotification) {
    IntelliSenseReadyNotification.type = { get method() { return 'textDocument/intelliSenseReady'; } };
})(IntelliSenseReadyNotification = exports.IntelliSenseReadyNotification || (exports.IntelliSenseReadyNotification = {}));
// ------------------------------- < Capabilties Discovery Event > ------------------------------------
var CapabiltiesDiscoveryParams = (function () {
    function CapabiltiesDiscoveryParams() {
    }
    return CapabiltiesDiscoveryParams;
}());
exports.CapabiltiesDiscoveryParams = CapabiltiesDiscoveryParams;
var CapabiltiesDiscoveryRequest;
(function (CapabiltiesDiscoveryRequest) {
    CapabiltiesDiscoveryRequest.type = { get method() { return 'capabilities/list'; } };
})(CapabiltiesDiscoveryRequest = exports.CapabiltiesDiscoveryRequest || (exports.CapabiltiesDiscoveryRequest = {}));
// Query Execution ================================================================================
// ------------------------------- < Query Cancellation Request > ------------------------------------
var QueryCancelRequest;
(function (QueryCancelRequest) {
    QueryCancelRequest.type = { get method() { return 'query/cancel'; } };
})(QueryCancelRequest = exports.QueryCancelRequest || (exports.QueryCancelRequest = {}));
// ------------------------------- < Query Dispose Request > ------------------------------------
var QueryDisposeRequest;
(function (QueryDisposeRequest) {
    QueryDisposeRequest.type = { get method() { return 'query/dispose'; } };
})(QueryDisposeRequest = exports.QueryDisposeRequest || (exports.QueryDisposeRequest = {}));
// ------------------------------- < Query Execution Complete Notification > ------------------------------------
var QueryExecuteCompleteNotification;
(function (QueryExecuteCompleteNotification) {
    QueryExecuteCompleteNotification.type = { get method() { return 'query/complete'; } };
})(QueryExecuteCompleteNotification = exports.QueryExecuteCompleteNotification || (exports.QueryExecuteCompleteNotification = {}));
// ------------------------------- < Query Batch Start  Notification > ------------------------------------
var QueryExecuteBatchStartNotification;
(function (QueryExecuteBatchStartNotification) {
    QueryExecuteBatchStartNotification.type = { get method() { return 'query/batchStart'; } };
})(QueryExecuteBatchStartNotification = exports.QueryExecuteBatchStartNotification || (exports.QueryExecuteBatchStartNotification = {}));
// ------------------------------- < Query Batch Complete Notification > ------------------------------------
var QueryExecuteBatchCompleteNotification;
(function (QueryExecuteBatchCompleteNotification) {
    QueryExecuteBatchCompleteNotification.type = { get method() { return 'query/batchComplete'; } };
})(QueryExecuteBatchCompleteNotification = exports.QueryExecuteBatchCompleteNotification || (exports.QueryExecuteBatchCompleteNotification = {}));
// ------------------------------- < Query ResultSet Complete Notification > ------------------------------------
var QueryExecuteResultSetCompleteNotification;
(function (QueryExecuteResultSetCompleteNotification) {
    QueryExecuteResultSetCompleteNotification.type = { get method() { return 'query/resultSetComplete'; } };
})(QueryExecuteResultSetCompleteNotification = exports.QueryExecuteResultSetCompleteNotification || (exports.QueryExecuteResultSetCompleteNotification = {}));
// ------------------------------- < Query Message Notification > ------------------------------------
var QueryExecuteMessageNotification;
(function (QueryExecuteMessageNotification) {
    QueryExecuteMessageNotification.type = { get method() { return 'query/message'; } };
})(QueryExecuteMessageNotification = exports.QueryExecuteMessageNotification || (exports.QueryExecuteMessageNotification = {}));
var QueryExecuteMessageParams = (function () {
    function QueryExecuteMessageParams() {
    }
    return QueryExecuteMessageParams;
}());
exports.QueryExecuteMessageParams = QueryExecuteMessageParams;
// ------------------------------- < Query Execution Request > ------------------------------------
var QueryExecuteRequest;
(function (QueryExecuteRequest) {
    QueryExecuteRequest.type = { get method() { return 'query/executeDocumentSelection'; } };
})(QueryExecuteRequest = exports.QueryExecuteRequest || (exports.QueryExecuteRequest = {}));
// ------------------------------- < Query Results Request > ------------------------------------
var QueryExecuteSubsetRequest;
(function (QueryExecuteSubsetRequest) {
    QueryExecuteSubsetRequest.type = { get method() { return 'query/subset'; } };
})(QueryExecuteSubsetRequest = exports.QueryExecuteSubsetRequest || (exports.QueryExecuteSubsetRequest = {}));
var QueryExecuteStatementRequest;
(function (QueryExecuteStatementRequest) {
    QueryExecuteStatementRequest.type = { get method() { return 'query/executedocumentstatement'; } };
})(QueryExecuteStatementRequest = exports.QueryExecuteStatementRequest || (exports.QueryExecuteStatementRequest = {}));
var SaveResultRequestResult = (function () {
    function SaveResultRequestResult() {
    }
    return SaveResultRequestResult;
}());
exports.SaveResultRequestResult = SaveResultRequestResult;
// save results in csv format
var SaveResultsAsCsvRequest;
(function (SaveResultsAsCsvRequest) {
    SaveResultsAsCsvRequest.type = { get method() { return 'query/saveCsv'; } };
})(SaveResultsAsCsvRequest = exports.SaveResultsAsCsvRequest || (exports.SaveResultsAsCsvRequest = {}));
// --------------------------------- </ Save Results as CSV Request > ------------------------------------------
// --------------------------------- < Save Results as JSON Request > ------------------------------------------
// save results in json format
var SaveResultsAsJsonRequest;
(function (SaveResultsAsJsonRequest) {
    SaveResultsAsJsonRequest.type = { get method() { return 'query/saveJson'; } };
})(SaveResultsAsJsonRequest = exports.SaveResultsAsJsonRequest || (exports.SaveResultsAsJsonRequest = {}));
// --------------------------------- </ Save Results as JSON Request > ------------------------------------------
// --------------------------------- < Save Results as Excel Request > ------------------------------------------
// save results in Excel format
var SaveResultsAsExcelRequest;
(function (SaveResultsAsExcelRequest) {
    SaveResultsAsExcelRequest.type = { get method() { return 'query/saveExcel'; } };
})(SaveResultsAsExcelRequest = exports.SaveResultsAsExcelRequest || (exports.SaveResultsAsExcelRequest = {}));
var SimpleExecuteRequest;
(function (SimpleExecuteRequest) {
    SimpleExecuteRequest.type = { get method() { return 'query/simpleexecute'; } };
})(SimpleExecuteRequest = exports.SimpleExecuteRequest || (exports.SimpleExecuteRequest = {}));
var QueryExecuteStringRequest;
(function (QueryExecuteStringRequest) {
    QueryExecuteStringRequest.type = { get method() { return 'query/executeString'; } };
})(QueryExecuteStringRequest = exports.QueryExecuteStringRequest || (exports.QueryExecuteStringRequest = {}));
// ------------------------------- < Metadata Events > ------------------------------------
var MetadataQueryRequest;
(function (MetadataQueryRequest) {
    MetadataQueryRequest.type = { get method() { return 'metadata/list'; } };
})(MetadataQueryRequest = exports.MetadataQueryRequest || (exports.MetadataQueryRequest = {}));
// ------------------------------- < Scripting Events > ------------------------------------
var ScriptingRequest;
(function (ScriptingRequest) {
    ScriptingRequest.type = { get method() { return 'scripting/script'; } };
})(ScriptingRequest = exports.ScriptingRequest || (exports.ScriptingRequest = {}));
// ------------------------------- < Scripting Complete Event > ------------------------------------
var ScriptingCompleteNotification;
(function (ScriptingCompleteNotification) {
    ScriptingCompleteNotification.type = { get method() { return 'scripting/scriptComplete'; } };
})(ScriptingCompleteNotification = exports.ScriptingCompleteNotification || (exports.ScriptingCompleteNotification = {}));
// edit/commit --------------------------------------------------------------------------------
var EditCommitRequest;
(function (EditCommitRequest) {
    EditCommitRequest.type = { get method() { return 'edit/commit'; } };
})(EditCommitRequest = exports.EditCommitRequest || (exports.EditCommitRequest = {}));
// edit/createRow -----------------------------------------------------------------------------
var EditCreateRowRequest;
(function (EditCreateRowRequest) {
    EditCreateRowRequest.type = { get method() { return 'edit/createRow'; } };
})(EditCreateRowRequest = exports.EditCreateRowRequest || (exports.EditCreateRowRequest = {}));
// edit/deleteRow -----------------------------------------------------------------------------
var EditDeleteRowRequest;
(function (EditDeleteRowRequest) {
    EditDeleteRowRequest.type = { get method() { return 'edit/deleteRow'; } };
})(EditDeleteRowRequest = exports.EditDeleteRowRequest || (exports.EditDeleteRowRequest = {}));
// edit/dispose -------------------------------------------------------------------------------
var EditDisposeRequest;
(function (EditDisposeRequest) {
    EditDisposeRequest.type = { get method() { return 'edit/dispose'; } };
})(EditDisposeRequest = exports.EditDisposeRequest || (exports.EditDisposeRequest = {}));
// edit/initialize ----------------------------------------------------------------------------
var EditInitializeRequest;
(function (EditInitializeRequest) {
    EditInitializeRequest.type = { get method() { return 'edit/initialize'; } };
})(EditInitializeRequest = exports.EditInitializeRequest || (exports.EditInitializeRequest = {}));
// edit/revertCell --------------------------------------------------------------------------------
var EditRevertCellRequest;
(function (EditRevertCellRequest) {
    EditRevertCellRequest.type = { get method() { return 'edit/revertCell'; } };
})(EditRevertCellRequest = exports.EditRevertCellRequest || (exports.EditRevertCellRequest = {}));
// edit/revertRow -----------------------------------------------------------------------------
var EditRevertRowRequest;
(function (EditRevertRowRequest) {
    EditRevertRowRequest.type = { get method() { return 'edit/revertRow'; } };
})(EditRevertRowRequest = exports.EditRevertRowRequest || (exports.EditRevertRowRequest = {}));
// edit/sessionReady Event --------------------------------------------------------------------
var EditSessionReadyNotification;
(function (EditSessionReadyNotification) {
    EditSessionReadyNotification.type = { get method() { return 'edit/sessionReady'; } };
})(EditSessionReadyNotification = exports.EditSessionReadyNotification || (exports.EditSessionReadyNotification = {}));
// edit/updateCell ----------------------------------------------------------------------------
var EditUpdateCellRequest;
(function (EditUpdateCellRequest) {
    EditUpdateCellRequest.type = { get method() { return 'edit/updateCell'; } };
})(EditUpdateCellRequest = exports.EditUpdateCellRequest || (exports.EditUpdateCellRequest = {}));
// edit/subset ------------------------------------------------------------------------------------
var EditSubsetRequest;
(function (EditSubsetRequest) {
    EditSubsetRequest.type = { get method() { return 'edit/subset'; } };
})(EditSubsetRequest = exports.EditSubsetRequest || (exports.EditSubsetRequest = {}));
// ------------------------------- < Object Explorer Events > ------------------------------------
var ObjectExplorerCreateSessionRequest;
(function (ObjectExplorerCreateSessionRequest) {
    ObjectExplorerCreateSessionRequest.type = { get method() { return 'objectexplorer/createsession'; } };
})(ObjectExplorerCreateSessionRequest = exports.ObjectExplorerCreateSessionRequest || (exports.ObjectExplorerCreateSessionRequest = {}));
var ObjectExplorerExpandRequest;
(function (ObjectExplorerExpandRequest) {
    ObjectExplorerExpandRequest.type = { get method() { return 'objectexplorer/expand'; } };
})(ObjectExplorerExpandRequest = exports.ObjectExplorerExpandRequest || (exports.ObjectExplorerExpandRequest = {}));
var ObjectExplorerRefreshRequest;
(function (ObjectExplorerRefreshRequest) {
    ObjectExplorerRefreshRequest.type = { get method() { return 'objectexplorer/refresh'; } };
})(ObjectExplorerRefreshRequest = exports.ObjectExplorerRefreshRequest || (exports.ObjectExplorerRefreshRequest = {}));
var ObjectExplorerCloseSessionRequest;
(function (ObjectExplorerCloseSessionRequest) {
    ObjectExplorerCloseSessionRequest.type = { get method() { return 'objectexplorer/closesession'; } };
})(ObjectExplorerCloseSessionRequest = exports.ObjectExplorerCloseSessionRequest || (exports.ObjectExplorerCloseSessionRequest = {}));
// ------------------------------- < Object Explorer Events > ------------------------------------
var ObjectExplorerCreateSessionCompleteNotification;
(function (ObjectExplorerCreateSessionCompleteNotification) {
    ObjectExplorerCreateSessionCompleteNotification.type = { get method() { return 'objectexplorer/sessioncreated'; } };
})(ObjectExplorerCreateSessionCompleteNotification = exports.ObjectExplorerCreateSessionCompleteNotification || (exports.ObjectExplorerCreateSessionCompleteNotification = {}));
var ObjectExplorerExpandCompleteNotification;
(function (ObjectExplorerExpandCompleteNotification) {
    ObjectExplorerExpandCompleteNotification.type = { get method() { return 'objectexplorer/expandCompleted'; } };
})(ObjectExplorerExpandCompleteNotification = exports.ObjectExplorerExpandCompleteNotification || (exports.ObjectExplorerExpandCompleteNotification = {}));
// ------------------------------- < Task Service Events > ------------------------------------
var ListTasksRequest;
(function (ListTasksRequest) {
    ListTasksRequest.type = { get method() { return 'tasks/listtasks'; } };
})(ListTasksRequest = exports.ListTasksRequest || (exports.ListTasksRequest = {}));
var CancelTaskRequest;
(function (CancelTaskRequest) {
    CancelTaskRequest.type = { get method() { return 'tasks/canceltask'; } };
})(CancelTaskRequest = exports.CancelTaskRequest || (exports.CancelTaskRequest = {}));
// ------------------------------- < Task Service Events > ------------------------------------
var TaskStatusChangedNotification;
(function (TaskStatusChangedNotification) {
    TaskStatusChangedNotification.type = { get method() { return 'tasks/statuschanged'; } };
})(TaskStatusChangedNotification = exports.TaskStatusChangedNotification || (exports.TaskStatusChangedNotification = {}));
var TaskCreatedNotification;
(function (TaskCreatedNotification) {
    TaskCreatedNotification.type = { get method() { return 'tasks/newtaskcreated'; } };
})(TaskCreatedNotification = exports.TaskCreatedNotification || (exports.TaskCreatedNotification = {}));
// ------------------------------- < Admin Service Events > ------------------------------------
var CreateDatabaseRequest;
(function (CreateDatabaseRequest) {
    CreateDatabaseRequest.type = { get method() { return 'admin/createdatabase'; } };
})(CreateDatabaseRequest = exports.CreateDatabaseRequest || (exports.CreateDatabaseRequest = {}));
var DefaultDatabaseInfoRequest;
(function (DefaultDatabaseInfoRequest) {
    DefaultDatabaseInfoRequest.type = { get method() { return 'admin/defaultdatabaseinfo'; } };
})(DefaultDatabaseInfoRequest = exports.DefaultDatabaseInfoRequest || (exports.DefaultDatabaseInfoRequest = {}));
var CreateLoginRequest;
(function (CreateLoginRequest) {
    CreateLoginRequest.type = { get method() { return 'admin/createlogin'; } };
})(CreateLoginRequest = exports.CreateLoginRequest || (exports.CreateLoginRequest = {}));
var GetDatabaseInfoRequest;
(function (GetDatabaseInfoRequest) {
    GetDatabaseInfoRequest.type = { get method() { return 'admin/getdatabaseinfo'; } };
})(GetDatabaseInfoRequest = exports.GetDatabaseInfoRequest || (exports.GetDatabaseInfoRequest = {}));
// ------------------------------- < Disaster Recovery Events > ------------------------------------
var BackupRequest;
(function (BackupRequest) {
    BackupRequest.type = { get method() { return 'disasterrecovery/backup'; } };
})(BackupRequest = exports.BackupRequest || (exports.BackupRequest = {}));
var BackupConfigInfoRequest;
(function (BackupConfigInfoRequest) {
    BackupConfigInfoRequest.type = { get method() { return 'disasterrecovery/backupconfiginfo'; } };
})(BackupConfigInfoRequest = exports.BackupConfigInfoRequest || (exports.BackupConfigInfoRequest = {}));
var RestoreRequest;
(function (RestoreRequest) {
    RestoreRequest.type = { get method() { return 'disasterrecovery/restore'; } };
})(RestoreRequest = exports.RestoreRequest || (exports.RestoreRequest = {}));
var RestorePlanRequest;
(function (RestorePlanRequest) {
    RestorePlanRequest.type = { get method() { return 'disasterrecovery/restoreplan'; } };
})(RestorePlanRequest = exports.RestorePlanRequest || (exports.RestorePlanRequest = {}));
var CancelRestorePlanRequest;
(function (CancelRestorePlanRequest) {
    CancelRestorePlanRequest.type = { get method() { return 'disasterrecovery/cancelrestoreplan'; } };
})(CancelRestorePlanRequest = exports.CancelRestorePlanRequest || (exports.CancelRestorePlanRequest = {}));
var RestoreConfigInfoRequest;
(function (RestoreConfigInfoRequest) {
    RestoreConfigInfoRequest.type = { get method() { return 'disasterrecovery/restoreconfiginfo'; } };
})(RestoreConfigInfoRequest = exports.RestoreConfigInfoRequest || (exports.RestoreConfigInfoRequest = {}));
// ------------------------------- < File Browser Events > ------------------------------------
var FileBrowserOpenRequest;
(function (FileBrowserOpenRequest) {
    FileBrowserOpenRequest.type = { get method() { return 'filebrowser/open'; } };
})(FileBrowserOpenRequest = exports.FileBrowserOpenRequest || (exports.FileBrowserOpenRequest = {}));
var FileBrowserOpenedNotification;
(function (FileBrowserOpenedNotification) {
    FileBrowserOpenedNotification.type = { get method() { return 'filebrowser/opencomplete'; } };
})(FileBrowserOpenedNotification = exports.FileBrowserOpenedNotification || (exports.FileBrowserOpenedNotification = {}));
var FileBrowserExpandRequest;
(function (FileBrowserExpandRequest) {
    FileBrowserExpandRequest.type = { get method() { return 'filebrowser/expand'; } };
})(FileBrowserExpandRequest = exports.FileBrowserExpandRequest || (exports.FileBrowserExpandRequest = {}));
var FileBrowserExpandedNotification;
(function (FileBrowserExpandedNotification) {
    FileBrowserExpandedNotification.type = { get method() { return 'filebrowser/expandcomplete'; } };
})(FileBrowserExpandedNotification = exports.FileBrowserExpandedNotification || (exports.FileBrowserExpandedNotification = {}));
var FileBrowserValidateRequest;
(function (FileBrowserValidateRequest) {
    FileBrowserValidateRequest.type = { get method() { return 'filebrowser/validate'; } };
})(FileBrowserValidateRequest = exports.FileBrowserValidateRequest || (exports.FileBrowserValidateRequest = {}));
var FileBrowserValidatedNotification;
(function (FileBrowserValidatedNotification) {
    FileBrowserValidatedNotification.type = { get method() { return 'filebrowser/validatecomplete'; } };
})(FileBrowserValidatedNotification = exports.FileBrowserValidatedNotification || (exports.FileBrowserValidatedNotification = {}));
var FileBrowserCloseRequest;
(function (FileBrowserCloseRequest) {
    FileBrowserCloseRequest.type = { get method() { return 'filebrowser/close'; } };
})(FileBrowserCloseRequest = exports.FileBrowserCloseRequest || (exports.FileBrowserCloseRequest = {}));
